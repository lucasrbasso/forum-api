generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)

  questions    Question[]
  answers      Answer[]
  comment      Comment[]
  notification Notification[]
  tableAudit   UsersAudit[]

  @@map("users")
}

model UsersAudit {
  id               Int      @id @default(autoincrement())
  versionOperation String   @map("version_operation")
  versionTableId   String?  @map("version_table_id")
  versionTimestamp DateTime @map("version_timestamp")
  oldData          Json?    @map("old_data")
  newData          Json?    @map("new_data")
  Table            User?    @relation(fields: [versionTableId], references: [id])

  @@map("users_audit")
}

model Question {
  id             String           @id @default(uuid())
  title          String
  slug           String           @unique
  content        String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime?        @updatedAt @map("updated_at")
  authorId       String           @map("author_id")
  bestAnswerId   String?          @unique @map("best_answer_id")
  author         User             @relation(fields: [authorId], references: [id])
  bestAnswer     Answer?          @relation("bestAnswer", fields: [bestAnswerId], references: [id])
  answers        Answer[]
  comments       Comment[]
  attachments    Attachment[]
  QuestionsAudit QuestionsAudit[]

  @@map("questions")
}

model QuestionsAudit {
  id               Int       @id @default(autoincrement())
  versionOperation String    @map("version_operation")
  versionTableId   String?   @map("version_table_id")
  versionTimestamp DateTime  @map("version_timestamp")
  oldData          Json?     @map("old_data")
  newData          Json?     @map("new_data")
  Table            Question? @relation(fields: [versionTableId], references: [id])

  @@map("questions_audit")
}

model Answer {
  id           String         @id @default(uuid())
  content      String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime?      @updatedAt @map("updated_at")
  authorId     String         @map("author_id")
  questionId   String         @map("question_id")
  author       User           @relation(fields: [authorId], references: [id])
  bestAnswerOn Question?      @relation("bestAnswer")
  question     Question       @relation(fields: [questionId], references: [id])
  comments     Comment[]
  attachments  Attachment[]
  AnswersAudit AnswersAudit[]

  @@map("answers")
}

model AnswersAudit {
  id               Int      @id @default(autoincrement())
  versionOperation String   @map("version_operation")
  versionTableId   String?  @map("version_table_id")
  versionTimestamp DateTime @map("version_timestamp")
  oldData          Json?    @map("old_data")
  newData          Json?    @map("new_data")
  Table            Answer?  @relation(fields: [versionTableId], references: [id])

  @@map("answers_audit")
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  authorId   String    @map("author_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  question   Question? @relation(fields: [questionId], references: [id])
  answer     Answer?   @relation(fields: [answerId], references: [id])
  author     User      @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String    @id @default(uuid())
  title      String
  url        String
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")
  question   Question? @relation(fields: [questionId], references: [id])
  answer     Answer?   @relation(fields: [answerId], references: [id])

  @@map("attachments")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  recipient   User      @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}
